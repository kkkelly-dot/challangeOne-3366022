{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMOFuqbZHWgU2Vb2g621ngV",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kkkelly-dot/challangeOne-3366022/blob/main/challenge0ne\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "_gFLttrghUTf",
        "outputId": "2620dfc9-eecf-4d9a-fc83-213c09507766"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "class Trie {\n",
              "    constructor() {\n",
              "        this.root = {};\n",
              "    }\n",
              "    \n",
              "    insert(word) {\n",
              "        let node = this.root;\n",
              "        for (let char of word) {\n",
              "            if (!node[char]) node[char] = {};\n",
              "            node = node[char];\n",
              "        }\n",
              "        node.isEnd = true;\n",
              "    }\n",
              "    \n",
              "    search(word) {\n",
              "        let node = this.root;\n",
              "        for (let char of word) {\n",
              "            if (!node[char]) return false;\n",
              "            node = node[char];\n",
              "        }\n",
              "        return !!node.isEnd;\n",
              "    }\n",
              "    \n",
              "    startsWith(prefix) {\n",
              "        let node = this.root;\n",
              "        for (let char of prefix) {\n",
              "            if (!node[char]) return false;\n",
              "            node = node[char];\n",
              "        }\n",
              "        return true;\n",
              "    }\n",
              "}\n",
              "\n",
              "\n",
              "const trie = new Trie();\n",
              "trie.insert(\"apple\");\n",
              "element.append(\"search('apple'): \" + trie.search(\"apple\") + \"<br>\");\n",
              "element.append(\"search('app'): \" + trie.search(\"app\") + \"<br>\");\n",
              "element.append(\"startsWith('app'): \" + trie.startsWith(\"app\") + \"<br>\");\n",
              "trie.insert(\"app\");\n",
              "element.append(\"After inserting 'app', search('app'): \" + trie.search(\"app\"));\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "%%js\n",
        "\n",
        "class Trie {\n",
        "    constructor() {\n",
        "        this.root = {};\n",
        "    }\n",
        "\n",
        "    insert(word) {\n",
        "        let node = this.root;\n",
        "        for (let char of word) {\n",
        "            if (!node[char]) node[char] = {};\n",
        "            node = node[char];\n",
        "        }\n",
        "        node.isEnd = true;\n",
        "    }\n",
        "\n",
        "    search(word) {\n",
        "        let node = this.root;\n",
        "        for (let char of word) {\n",
        "            if (!node[char]) return false;\n",
        "            node = node[char];\n",
        "        }\n",
        "        return !!node.isEnd;\n",
        "    }\n",
        "\n",
        "    startsWith(prefix) {\n",
        "        let node = this.root;\n",
        "        for (let char of prefix) {\n",
        "            if (!node[char]) return false;\n",
        "            node = node[char];\n",
        "        }\n",
        "        return true;\n",
        "    }\n",
        "}\n",
        "\n",
        "\n",
        "const trie = new Trie();\n",
        "trie.insert(\"apple\");\n",
        "element.append(\"search('apple'): \" + trie.search(\"apple\") + \"<br>\");\n",
        "element.append(\"search('app'): \" + trie.search(\"app\") + \"<br>\");\n",
        "element.append(\"startsWith('app'): \" + trie.startsWith(\"app\") + \"<br>\");\n",
        "trie.insert(\"app\");\n",
        "element.append(\"After inserting 'app', search('app'): \" + trie.search(\"app\"));"
      ]
    }
  ]
}